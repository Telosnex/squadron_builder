import 'package:analyzer/dart/element/element.dart';
import 'package:build/build.dart';
import 'package:source_gen/source_gen.dart';
import 'package:squadron/squadron_annotations.dart';

import 'annotations/squadron_service_annotation.dart';
import 'worker_assets.dart';

class WorkerGenerator extends GeneratorForAnnotation<SquadronService> {
  const WorkerGenerator(
      {this.formatOutput = _noFormatting,
      this.withFinalizers = false,
      this.serializationType = 'Map'});

  final bool withFinalizers;
  final String serializationType;
  final String Function(String source) formatOutput;

  @override
  Iterable<String> generateForAnnotatedElement(
      Element element, ConstantReader annotation, BuildStep buildStep) {
    final classElt = element;
    if (classElt is! ClassElement) return const [];

    // implementation moved to specific methods to facilitate unit tests
    final service = SquadronServiceAnnotation.load(classElt)!;

    final assets = WorkerAssets(buildStep, service, formatOutput, header: '''
      // GENERATED CODE - DO NOT MODIFY BY HAND
      
      // **************************************************************************
      // Generated by: $runtimeType
      // **************************************************************************
      ''');

    assets.generateVmCode(service.logger, serializationType);
    assets.generateWebCode(service.logger, serializationType);
    assets.generateCrossPlatformCode();
    assets.generateActivatorCode();

    try {
      return assets.generateMapWorkerAndPool(withFinalizers);
    } catch (ex, st) {
      print('CAUGHT $ex');
      print(st);
      rethrow;
    }
  }
}

String _noFormatting(String source) => source;
